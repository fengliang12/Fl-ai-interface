name: CI/CD Pipeline

# 触发条件：创建Pull Request到main分支
on:
  pull_request:
    branches: [main]

jobs:
  # 测试阶段
  test:
    runs-on: ubuntu-latest
    timeout-minutes: 30

    strategy:
      matrix:
        node-version: [20.x]

    steps:
      # 检出代码
      - name: Checkout code
        uses: actions/checkout@v4

      # 设置Node.js环境
      - name: Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}

      # 缓存node_modules
      - name: Cache node modules
        uses: actions/cache@v3
        with:
          path: node_modules
          key: ${{ runner.os }}-node-${{ hashFiles('**/yarn.lock') }}

      # 安装依赖
      - name: Install dependencies
        run: yarn install --prefer-offline

      # 代码检查
      - name: Run ESLint
        run: yarn lint

      # TypeScript类型检查
      - name: TypeScript check
        run: yarn tsc --noEmit

      # 运行单元测试
      - name: Run unit tests
        run: yarn test

      # 构建项目（单元测试通过后）
      - name: Build project
        run: yarn client:prod

      # 启动开发服务器（后台运行）
      - name: Start development server
        run: yarn client:server &

      # 等待服务器启动
      - name: Wait for server
        run: |
          timeout 60 bash -c 'until curl -f http://localhost:3000; do sleep 1; done'

      # 运行E2E测试（构建成功后）
      - name: Run E2E tests
        run: yarn test:e2e:headless
        env:
          CYPRESS_CACHE_FOLDER: ~/.cache/Cypress

      # 上传测试覆盖率报告
      - name: Upload coverage reports
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage/lcov.info
          fail_ci_if_error: false

  # ai审查
  ai_review:
    name: AI Code Review
    needs: [test]
    if: github.event_name == 'pull_request'
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: '20.x'
      - name: Install dependencies
        run: yarn install --prefer-offline
      - name: Run AI Review
        run: yarn run review
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # 部署阶段（仅在测试通过后执行）
  # deploy:
  #   needs: test
  #   runs-on: ubuntu-latest
  #   timeout-minutes: 15
  #   if: github.ref == 'refs/heads/main' && github.event_name == 'push'

  #   steps:
  #   # 检出代码
  #   - name: Checkout code
  #     uses: actions/checkout@v4

  #   # 设置Node.js环境
  #   - name: Setup Node.js
  #     uses: actions/setup-node@v4
  #     with:
  #       node-version: '20.x'

  #   # 缓存node_modules
  #   - name: Cache node modules
  #     uses: actions/cache@v3
  #     with:
  #       path: node_modules
  #       key: ${{ runner.os }}-node-${{ hashFiles('**/yarn.lock') }}

  #   # 安装依赖
  #   - name: Install dependencies
  #     run: yarn install --prefer-offline

  #   # 构建生产版本
  #   - name: Build for production
  #     run: yarn client:prod

  #   # 部署到Cloudflare Pages
  #   - name: Deploy to Cloudflare Pages
  #     uses: cloudflare/pages-action@v1
  #     with:
  #       apiToken: ${{ secrets.CLOUDFLARE_API_TOKEN }}
  #       accountId: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
  #       projectName: ${{ secrets.CLOUDFLARE_PROJECT_NAME }}
  #       directory: ./dist
  #       # 只有在所有测试通过后才部署
  #       gitHubToken: ${{ secrets.GITHUB_TOKEN }}
