# GitHub Actions CI 工作流配置文件
name: CI Pipeline

# 定义触发工作流的事件
on:
  # 当推送到指定分支时触发
  push:
    branches: [main, develop]  # 仅在推送到 main 或 develop 分支时触发
  # 当创建针对指定分支的 Pull Request 时触发
  pull_request:
    branches: [main, develop]  # 仅针对 main 或 develop 分支的 PR 触发

# 定义环境变量，可在所有 jobs 中使用
env:
  NODE_VERSION: '18'  # Node.js 版本
  PNPM_VERSION: '8'   # pnpm 包管理器版本
  CYPRESS_CACHE_FOLDER: ~/.cache/Cypress  # Cypress 二进制文件缓存目录

# 定义工作流中的所有任务
jobs:
  # 代码质量检查任务
  lint:
    runs-on: ubuntu-latest  # 运行环境：最新版 Ubuntu
    steps:  # 任务步骤列表
      # 步骤1：检出代码到运行环境
      - name: Checkout code
        uses: actions/checkout@v4  # 使用官方检出 action

      # 步骤2：安装 pnpm 包管理器
      - name: Install pnpm
        uses: pnpm/action-setup@v4  # 使用 pnpm 官方 action
        with:
          version: ${{ env.PNPM_VERSION }}  # 使用环境变量中定义的版本

      # 步骤3：设置 Node.js 环境
      - name: Setup Node.js
        uses: actions/setup-node@v4  # 使用官方 Node.js 设置 action
        with:
          node-version: ${{ env.NODE_VERSION }}  # 使用环境变量中定义的 Node.js 版本
          cache: "pnpm"  # 启用 pnpm 缓存以加速依赖安装

      # 步骤4：获取 pnpm 存储目录路径
      - name: Get pnpm store directory
        shell: bash  # 使用 bash shell 执行命令
        run: |  # 多行命令
          echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV  # 将 pnpm 存储路径设置为环境变量

      # 步骤5：设置 pnpm 缓存以加速后续构建
      - name: Setup pnpm cache
        uses: actions/cache@v4  # 使用官方缓存 action
        with:
          path: ${{ env.STORE_PATH }}  # 缓存路径：pnpm 存储目录
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}  # 缓存键：基于操作系统和 lockfile 哈希
          restore-keys: |  # 缓存恢复键的备选方案
            ${{ runner.os }}-pnpm-store-  # 如果精确匹配失败，使用部分匹配

      # 步骤6：安装项目依赖
      - name: Install dependencies
        run: pnpm install --no-frozen-lockfile  # 安装依赖，允许更新 lockfile

      # 步骤7：运行代码检查（ESLint）
      - name: Run linting
        run: pnpm run lint  # 执行 package.json 中定义的 lint 脚本

      # 步骤8：运行 TypeScript 类型检查
      - name: Check TypeScript
        run: npx tsc --noEmit  # 运行 TypeScript 编译器进行类型检查，不生成输出文件

  # 单元测试任务
  unit-tests:
    runs-on: ubuntu-latest  # 运行环境：最新版 Ubuntu
    steps:  # 任务步骤列表
      # 步骤1：检出代码到运行环境
      - name: Checkout code
        uses: actions/checkout@v4  # 使用官方检出 action

      # 步骤2：安装 pnpm 包管理器
      - name: Install pnpm
        uses: pnpm/action-setup@v4  # 使用 pnpm 官方 action
        with:
          version: ${{ env.PNPM_VERSION }}  # 使用环境变量中定义的版本

      # 步骤3：设置 Node.js 环境
      - name: Setup Node.js
        uses: actions/setup-node@v4  # 使用官方 Node.js 设置 action
        with:
          node-version: ${{ env.NODE_VERSION }}  # 使用环境变量中定义的 Node.js 版本
          cache: "pnpm"  # 启用 pnpm 缓存以加速依赖安装

      # 步骤4：获取 pnpm 存储目录路径
      - name: Get pnpm store directory
        shell: bash  # 使用 bash shell 执行命令
        run: |  # 多行命令
          echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV  # 将 pnpm 存储路径设置为环境变量

      # 步骤5：设置 pnpm 缓存以加速后续构建
      - name: Setup pnpm cache
        uses: actions/cache@v4  # 使用官方缓存 action
        with:
          path: ${{ env.STORE_PATH }}  # 缓存路径：pnpm 存储目录
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}  # 缓存键：基于操作系统和 lockfile 哈希
          restore-keys: |  # 缓存恢复键的备选方案
            ${{ runner.os }}-pnpm-store-  # 如果精确匹配失败，使用部分匹配

      # 步骤6：安装项目依赖
      - name: Install dependencies
        run: pnpm install --no-frozen-lockfile  # 安装依赖，允许更新 lockfile

      # 步骤7：运行单元测试
      - name: Run unit tests
        run: pnpm run test:unit:ci  # 执行 package.json 中定义的单元测试脚本（CI 模式）

      # 步骤8：上传测试覆盖率报告
      - name: Upload coverage reports
        uses: codecov/codecov-action@v4  # 使用 Codecov action 上传覆盖率报告
        with:
          token: ${{ secrets.CODECOV_TOKEN }}  # 使用 GitHub Secrets 中的 Codecov token
          files: ./coverage/lcov.info  # 覆盖率报告文件路径
          fail_ci_if_error: false  # 即使上传失败也不让 CI 失败

  # E2E（端到端）测试任务
  e2e-tests:
    runs-on: ubuntu-latest  # 运行环境：最新版 Ubuntu
    needs: unit-tests  # 依赖于单元测试任务完成
    steps:  # 任务步骤列表
      # 步骤1：检出代码到运行环境
      - name: Checkout code
        uses: actions/checkout@v4  # 使用官方检出 action

      # 步骤2：安装 pnpm 包管理器
      - name: Install pnpm
        uses: pnpm/action-setup@v4  # 使用 pnpm 官方 action
        with:
          version: ${{ env.PNPM_VERSION }}  # 使用环境变量中定义的版本

      # 步骤3：设置 Node.js 环境
      - name: Setup Node.js
        uses: actions/setup-node@v4  # 使用官方 Node.js 设置 action
        with:
          node-version: ${{ env.NODE_VERSION }}  # 使用环境变量中定义的 Node.js 版本
          cache: "pnpm"  # 启用 pnpm 缓存以加速依赖安装

      # 步骤4：获取 pnpm 存储目录路径
      - name: Get pnpm store directory
        shell: bash  # 使用 bash shell 执行命令
        run: |  # 多行命令
          echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV  # 将 pnpm 存储路径设置为环境变量

      # 步骤5：设置 pnpm 缓存以加速后续构建
      - name: Setup pnpm cache
        uses: actions/cache@v4  # 使用官方缓存 action
        with:
          path: ${{ env.STORE_PATH }}  # 缓存路径：pnpm 存储目录
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}  # 缓存键：基于操作系统和 lockfile 哈希
          restore-keys: |  # 缓存恢复键的备选方案
            ${{ runner.os }}-pnpm-store-  # 如果精确匹配失败，使用部分匹配

      # 步骤6：缓存 Cypress 二进制文件以加速安装
      - name: Cache Cypress binary
        uses: actions/cache@v4  # 使用官方缓存 action
        with:
          path: ${{ env.CYPRESS_CACHE_FOLDER }}  # 缓存路径：Cypress 二进制文件目录
          key: ${{ runner.os }}-cypress-${{ hashFiles('**/pnpm-lock.yaml') }}  # 缓存键：基于操作系统和 lockfile 哈希
          restore-keys: |  # 缓存恢复键的备选方案
            ${{ runner.os }}-cypress-  # 如果精确匹配失败，使用部分匹配

      # 步骤7：安装项目依赖
      - name: Install dependencies
        run: pnpm install --no-frozen-lockfile  # 安装依赖，允许更新 lockfile

      # 步骤8：安装 Cypress 二进制文件
      - name: Install Cypress binary
        run: npx cypress install  # 确保 Cypress 二进制文件已安装

      # 步骤9：启动应用程序（后台运行）
      - name: Start application in background
        run: |  # 多行命令
          pnpm run dev &  # 在后台启动开发服务器
          echo $! > .pidfile  # 将进程 ID 保存到文件中以便后续停止
        env:
          CI: true  # 设置 CI 环境变量

      # 步骤10：等待应用程序启动完成
      - name: Wait for application to be ready
        run: |  # 多行命令
          timeout 60 bash -c 'until curl -f http://localhost:3000; do sleep 2; done'  # 等待应用在 localhost:3000 可用，超时 60 秒

      # 步骤11：运行 Cypress E2E 测试
      - name: Run Cypress E2E tests
        run: pnpm run test:e2e:ci  # 执行 package.json 中定义的 E2E 测试脚本（CI 模式）
        env:
          CYPRESS_baseUrl: http://localhost:3000  # 设置 Cypress 基础 URL

      # 步骤12：停止应用程序（无论测试成功或失败都执行）
      - name: Stop application
        if: always()  # 无论前面步骤成功或失败都执行
        run: |  # 多行命令
          if [ -f .pidfile ]; then  # 如果进程 ID 文件存在
            kill $(cat .pidfile) || true  # 终止应用进程，忽略错误
            rm .pidfile  # 删除进程 ID 文件
          fi

      # 步骤13：上传测试失败时的截图
      - name: Upload Cypress screenshots
        uses: actions/upload-artifact@v4  # 使用官方上传 artifact action
        if: failure()  # 仅在测试失败时执行
        with:
          name: cypress-screenshots  # artifact 名称
          path: cypress/screenshots  # 截图文件路径

      # 步骤14：上传测试视频（无论成功或失败）
      - name: Upload Cypress videos
        uses: actions/upload-artifact@v4  # 使用官方上传 artifact action
        if: always()  # 无论测试成功或失败都执行
        with:
          name: cypress-videos  # artifact 名称
          path: cypress/videos  # 视频文件路径

  # 构建检查任务
  build:
    runs-on: ubuntu-latest  # 运行环境：最新版 Ubuntu
    needs: [lint, unit-tests]  # 依赖于 lint 和单元测试任务完成
    steps:  # 任务步骤列表
      # 步骤1：检出代码到运行环境
      - name: Checkout code
        uses: actions/checkout@v4  # 使用官方检出 action

      # 步骤2：安装 pnpm 包管理器
      - name: Install pnpm
        uses: pnpm/action-setup@v4  # 使用 pnpm 官方 action
        with:
          version: ${{ env.PNPM_VERSION }}  # 使用环境变量中定义的版本

      # 步骤3：设置 Node.js 环境
      - name: Setup Node.js
        uses: actions/setup-node@v4  # 使用官方 Node.js 设置 action
        with:
          node-version: ${{ env.NODE_VERSION }}  # 使用环境变量中定义的 Node.js 版本
          cache: "pnpm"  # 启用 pnpm 缓存以加速依赖安装

      # 步骤4：获取 pnpm 存储目录路径
      - name: Get pnpm store directory
        shell: bash  # 使用 bash shell 执行命令
        run: |  # 多行命令
          echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV  # 将 pnpm 存储路径设置为环境变量

      # 步骤5：设置 pnpm 缓存以加速后续构建
      - name: Setup pnpm cache
        uses: actions/cache@v4  # 使用官方缓存 action
        with:
          path: ${{ env.STORE_PATH }}  # 缓存路径：pnpm 存储目录
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}  # 缓存键：基于操作系统和 lockfile 哈希
          restore-keys: |  # 缓存恢复键的备选方案
            ${{ runner.os }}-pnpm-store-  # 如果精确匹配失败，使用部分匹配

      # 步骤6：安装项目依赖
      - name: Install dependencies
        run: pnpm install --no-frozen-lockfile  # 安装依赖，允许更新 lockfile

      # 步骤7：构建生产版本
      - name: Build for production
        run: pnpm run prod  # 执行 package.json 中定义的生产构建脚本

      # 步骤8：上传构建产物
      - name: Upload build artifacts
        uses: actions/upload-artifact@v4  # 使用官方上传 artifact action
        with:
          name: build-files  # artifact 名称
          path: dist/  # 构建输出目录路径
          retention-days: 7  # artifact 保留天数
