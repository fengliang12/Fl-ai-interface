# GitHub Actions CI 工作流配置文件
name: CI Pipeline # 工作流名称

# 触发条件：推送或拉取请求时执行
on:
  push: # 推送代码时触发
    branches: [main, develop] # 仅在main和develop分支触发
  pull_request: # 创建拉取请求时触发
    branches: [main, develop] # 仅针对main和develop分支的PR

# 环境变量定义
env:
  NODE_VERSION: '18' # Node.js版本
  PNPM_VERSION: '8' # PNPM包管理器版本
  CYPRESS_CACHE_FOLDER: ~/.cache/Cypress # Cypress缓存目录

# 任务定义
jobs:
  # 质量检查和单元测试（合并执行）
  test: # 测试任务名称
    runs-on: ubuntu-latest # 运行环境：Ubuntu最新版
    steps: # 执行步骤列表
      - uses: actions/checkout@v4 # 检出代码到工作目录
      - uses: pnpm/action-setup@v4 # 安装PNPM包管理器
        with: # 配置参数
          version: ${{ env.PNPM_VERSION }} # 使用环境变量中定义的PNPM版本
      - uses: actions/setup-node@v4 # 设置Node.js环境
        with: # 配置参数
          node-version: ${{ env.NODE_VERSION }} # 使用环境变量中定义的Node版本
          cache: 'pnpm' # 启用PNPM缓存加速安装

      - name: Install and run checks # 安装依赖并运行检查
        run: | # 多行命令脚本
          pnpm install --frozen-lockfile # 根据锁定文件安装依赖
          pnpm run lint # 运行代码风格检查
          npx tsc --noEmit # 运行TypeScript类型检查
          pnpm run test:unit:ci # 运行单元测试

      - name: Upload coverage # 上传测试覆盖率报告
        uses: codecov/codecov-action@v4 # 使用Codecov上传覆盖率
        with: # 配置参数
          token: ${{ secrets.CODECOV_TOKEN }} # Codecov访问令牌
          files: ./coverage/lcov.info # 覆盖率报告文件路径
          fail_ci_if_error: false # 上传失败时不中断CI

  # E2E 测试任务
  e2e-tests: # E2E测试任务名称
    runs-on: ubuntu-latest # 运行环境：Ubuntu最新版
    needs: test # 依赖test任务完成后执行
    steps: # 执行步骤列表
      - uses: actions/checkout@v4 # 检出代码到工作目录
      - uses: pnpm/action-setup@v4 # 安装PNPM包管理器
        with: # 配置参数
          version: ${{ env.PNPM_VERSION }} # 使用环境变量中定义的PNPM版本
      - uses: actions/setup-node@v4 # 设置Node.js环境
        with: # 配置参数
          node-version: ${{ env.NODE_VERSION }} # 使用环境变量中定义的Node版本
          cache: 'pnpm' # 启用PNPM缓存加速安装
      - uses: actions/cache@v4 # 设置Cypress二进制文件缓存
         with: # 配置参数
           path: ${{ env.CYPRESS_CACHE_FOLDER }} # 缓存路径
           key: ${{ runner.os }}-cypress-${{ hashFiles('**/pnpm-lock.yaml') }} # 缓存键值

       - name: Setup virtual display # 设置虚拟显示器
         run: | # 多行命令脚本
           sudo apt-get update # 更新包列表
           sudo apt-get install -y xvfb # 安装虚拟帧缓冲
           export DISPLAY=:99 # 设置显示器环境变量
           Xvfb :99 -screen 0 1024x768x24 > /dev/null 2>&1 & # 启动虚拟显示器

       - name: Install, start app and test # 安装依赖、启动应用并运行E2E测试
         run: | # 多行命令脚本
           pnpm install --frozen-lockfile # 根据锁定文件安装依赖
           npx cypress install # 安装Cypress二进制文件
           pnpm run dev & # 后台启动开发服务器
           echo $! > .pidfile # 保存服务器进程ID到文件
           timeout 60 bash -c 'until curl -f http://localhost:3000; do sleep 2; done' # 等待服务器启动完成
           pnpm run test:e2e:ci # 运行E2E测试
           kill $(cat .pidfile) || true # 测试完成后关闭服务器进程
         env: # 环境变量
           CI: true # 标识为CI环境
           CYPRESS_baseUrl: http://localhost:3000 # Cypress测试基础URL
           NODE_OPTIONS: '--import tsx/esm' # 修复Node.js 18下tsx加载器问题
           DISPLAY: ':99' # 设置虚拟显示器
           ELECTRON_DISABLE_SECURITY_WARNINGS: true # 禁用Electron安全警告

      - uses: actions/upload-artifact@v4 # 上传测试产物
        if: always() # 无论测试成功失败都执行
        with: # 配置参数
          name: cypress-artifacts # 产物名称
          path: | # 上传路径（多行）
            cypress/screenshots # 测试截图
            cypress/videos # 测试视频

  # 构建检查任务
  build: # 构建任务名称
    runs-on: ubuntu-latest # 运行环境：Ubuntu最新版
    needs: test # 依赖test任务完成后执行
    steps: # 执行步骤列表
      - uses: actions/checkout@v4 # 检出代码到工作目录
      - uses: pnpm/action-setup@v4 # 安装PNPM包管理器
        with: # 配置参数
          version: ${{ env.PNPM_VERSION }} # 使用环境变量中定义的PNPM版本
      - uses: actions/setup-node@v4 # 设置Node.js环境
        with: # 配置参数
          node-version: ${{ env.NODE_VERSION }} # 使用环境变量中定义的Node版本
          cache: 'pnpm' # 启用PNPM缓存加速安装

      - name: Install and build # 安装依赖并构建生产版本
        run: | # 多行命令脚本
          pnpm install --frozen-lockfile # 根据锁定文件安装依赖
          pnpm run prod # 执行生产环境构建

      - uses: actions/upload-artifact@v4 # 上传构建产物
        with: # 配置参数
          name: build-files # 产物名称
          path: dist/ # 构建输出目录
          retention-days: 7 # 产物保留天数
